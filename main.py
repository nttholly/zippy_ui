from PySide6.QtWidgets import QApplication
from PySide6.QtQml import QQmlApplicationEngine
from PySide6.QtCore import QObject, Slot, Signal, QTimer
import sys
import psutil
import base64
import requests
import io
from PIL import Image


class BoxManager(QObject):
    batteryLevelChanged = Signal()
    boxAlert = Signal(str, str)  # box_id, message

    def __init__(self):
        super().__init__()
        self.box_states = {
            "box1": False,
            "box2": False,
        }
        self._batteryLevel = 0
        self.loader = None  # s·∫Ω ƒë∆∞·ª£c g√°n t·ª´ main.py
        self.updateBatteryLevel()

    @Slot(str, result=str)
    def getQRPage(self, box_id):
        return "pages/QRdynamic.qml"

    @Slot(str, result=str)
    def getQRImage(self, box_id):
        """
        Box tr·ªëng: tr·∫£ QR code t·ª´ API
        Box ƒë·∫ßy: g·ª≠i c·∫£nh b√°o t·ªõi smallface v√† tr·∫£ ·∫£nh c·∫£nh b√°o
        """
        state = self.box_states.get(box_id, False)

        if state:  # Box ƒë·∫ßy
            self.boxAlert.emit(box_id, "ƒê√£ c√≥ h√†ng")
            img = Image.new("RGB", (200, 200), color=(255, 100, 100))
            buf = io.BytesIO()
            img.save(buf, format="PNG")
            img_b64 = base64.b64encode(buf.getvalue()).decode("utf-8")
            return f"data:image/png;base64,{img_b64}"

        # Box tr·ªëng ‚Üí L·∫•y QR code t·ª´ API
        order_code = "O-122864"
        api_url = f"http://192.168.0.107:8080"

        try:
            print(f"üîç [DEBUG] ƒêang g·ªçi API: {api_url}")
            response = requests.get(api_url, timeout=10)
            print(f"üîç [DEBUG] API status: {response.status_code}")

            if response.status_code == 200:
                response_data = response.json()
                if 'data' in response_data and 'qrCodeBase64' in response_data['data']:
                    qr_base64 = response_data['data']['qrCodeBase64']
                    print("‚úÖ [DEBUG] L·∫•y QR code th√†nh c√¥ng.")
                    return f"data:image/png;base64,{qr_base64}"
                else:
                    print("‚ö†Ô∏è [DEBUG] API tr·∫£ v·ªÅ JSON nh∆∞ng kh√¥ng c√≥ key 'qrCodeBase64'.")
            else:
                print(f"‚ö†Ô∏è [DEBUG] API tr·∫£ v·ªÅ status code {response.status_code}")

        except requests.exceptions.ConnectionError:
            print(f"‚ùå [DEBUG] Kh√¥ng th·ªÉ k·∫øt n·ªëi API t·∫°i {api_url}. Ki·ªÉm tra IP/Port ho·∫∑c m·∫°ng LAN.")
            # ·∫¢nh v√†ng c·∫£nh b√°o k·∫øt n·ªëi
            img = Image.new("RGB", (200, 200), color=(255, 255, 102))
            buf = io.BytesIO()
            img.save(buf, format="PNG")
            img_b64 = base64.b64encode(buf.getvalue()).decode("utf-8")
            return f"data:image/png;base64,{img_b64}"

        except Exception as e:
            print(f"‚ùå [DEBUG] L·ªói kh√¥ng x√°c ƒë·ªãnh khi g·ªçi API: {e}")

        # N·∫øu l·ªói kh√°c ‚Üí tr·∫£ ·∫£nh x√°m
        img = Image.new("RGB", (200, 200), color=(220, 220, 220))
        buf = io.BytesIO()
        img.save(buf, format="PNG")
        img_b64 = base64.b64encode(buf.getvalue()).decode("utf-8")
        return f"data:image/png;base64,{img_b64}"

    @Slot()
    def updateBatteryLevel(self):
        battery = psutil.sensors_battery()
        if battery:
            self._batteryLevel = battery.percent
            self.batteryLevelChanged.emit()

    @Slot(result=int)
    def getBatteryLevel(self):
        return self._batteryLevel

    # ‚úÖ Slot m·ªü trang About Us
    @Slot()
    def openAboutUs(self):
        if self.loader:
            self.loader.setProperty("source", "pages/Aboutus.qml")

    # ‚úÖ Slot m·ªü trang Help
    @Slot()
    def openHelp(self):
        if self.loader:
            self.loader.setProperty("source", "pages/Help.qml")


if __name__ == "__main__":
    app = QApplication(sys.argv)
    engine = QQmlApplicationEngine()

    manager = BoxManager()
    engine.rootContext().setContextProperty("boxManager", manager)

    engine.load("qml/main.qml")
    if not engine.rootObjects():
        sys.exit(-1)

    window = engine.rootObjects()[0]
    loader = window.findChild(QObject, "pageLoader")

    # G√°n loader cho manager ƒë·ªÉ c√≥ th·ªÉ ƒë·ªïi trang t·ª´ Python
    manager.loader = loader

    idle_timer = QTimer()
    idle_timer.setInterval(30_000)
    idle_timer.setSingleShot(True)

    def show_robotface():
        loader.setProperty("source", "pages/Robotface.qml")
        QTimer.singleShot(100, connect_robot_signal)

    def reset_idle_timer():
        if loader.property("source") == "":
            idle_timer.start()

    idle_timer.timeout.connect(show_robotface)

    def switch_to_mainpage():
        loader.setProperty("source", "")
        idle_timer.start()

    def connect_robot_signal():
        robot_face = loader.property("item")
        if robot_face:
            try:
                robot_face.robotClicked.connect(switch_to_mainpage)
            except Exception as e:
                print("‚ùå Kh√¥ng k·∫øt n·ªëi ƒë∆∞·ª£c signal robotClicked:", e)

    QTimer.singleShot(100, connect_robot_signal)

    try:
        window.userInteracted.connect(reset_idle_timer)
    except Exception as e:
        print("‚ö†Ô∏è Kh√¥ng th·ªÉ k·∫øt n·ªëi signal userInteracted:", e)

    sys.exit(app.exec())
